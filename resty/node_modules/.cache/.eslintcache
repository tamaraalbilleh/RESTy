[{"/home/tamara/RESTy/resty/src/index.js":"1","/home/tamara/RESTy/resty/src/App.jsx":"2","/home/tamara/RESTy/resty/src/footer.jsx":"3","/home/tamara/RESTy/resty/src/form.jsx":"4","/home/tamara/RESTy/resty/src/header.jsx":"5","/home/tamara/RESTy/resty/src/result.jsx":"6","/home/tamara/RESTy/resty/src/history.jsx":"7","/home/tamara/RESTy/resty/src/else.jsx":"8","/home/tamara/RESTy/resty/src/if.jsx":"9","/home/tamara/RESTy/resty/src/Loader.js":"10"},{"size":221,"mtime":1624735837280,"results":"11","hashOfConfig":"12"},{"size":1991,"mtime":1624736112970,"results":"13","hashOfConfig":"12"},{"size":188,"mtime":1624384828440,"results":"14","hashOfConfig":"12"},{"size":5098,"mtime":1624735878960,"results":"15","hashOfConfig":"12"},{"size":204,"mtime":1624384828440,"results":"16","hashOfConfig":"12"},{"size":660,"mtime":1624534035190,"results":"17","hashOfConfig":"12"},{"size":2312,"mtime":1624735869380,"results":"18","hashOfConfig":"12"},{"size":146,"mtime":1624482873414,"results":"19","hashOfConfig":"12"},{"size":145,"mtime":1624709498800,"results":"20","hashOfConfig":"12"},{"size":126,"mtime":1624709603090,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dnyih4",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/home/tamara/RESTy/resty/src/index.js",[],"/home/tamara/RESTy/resty/src/App.jsx",["47"],"import React from 'react';\nimport './App.scss';\nimport Header from './header'\nimport Footer from './footer'\nimport Form from './form'\nimport Result from './result'\nimport History from './history';\n\n\nclass App extends React.Component {\n  constructor (props){\n    super (props);\n    this.state = {\n      results : ['search result will appear here :'],\n      count : 0,\n      header : 'headers will be displayed here',\n      array : [],\n      method : '',\n      URL : '',\n      body : {},\n      flag : false,\n    }\n    this.handleForm = this.handleForm.bind(this);\n    this.handleHistory = this.handleHistory.bind (this);\n  }\n\n\n  handleForm (results,count, header , array , flag){\n    this.setState({ results, count  , header , array ,flag});\n  }\n\n  handleHistory(array, flag ){\n    this.setState ({...this.state, array : array, flag : flag })\n  };\n  afterSubmit = (method, URL , body)=>{\n    // console.log ('inside afterSubmit', this.state.URL)\n    this.setState ({method , URL , body})\n    \n  }\n\n  componentDidMount = ()=>{\n\n    let array = []\n      let oldResult =JSON.parse(localStorage.getItem('request'))\n      if (oldResult){\n        Object.values(oldResult).map((item) => {\n          if (!array.includes (item)){\n            array.push (item)\n          }\n        });\n      }\n    this.setState({array})\n\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n      <Header/>\n      <main>\n      <History historyHandler={this.handleHistory} after={this.afterSubmit}   arr={this.state.array} flag={this.state.flag} />\n      <Form handler={this.handleForm}  meth= {this.state.method} ur={this.state.URL}  bod={this.state.body} fl={this.state.flag}/> \n      <Result results = {this.state.results} count={this.state.count} header={this.state.header}/>\n      </main>\n  \n      <Footer/>\n      </React.Fragment>\n    )\n  }\n}\n\n\n\n// function App() {\n//   return (\n//     <React.Fragment>\n//       <Header/>\n//       <Form/>\n//       <Footer/>\n//     </React.Fragment>\n//   )\n// }\n\nexport default App;\n","/home/tamara/RESTy/resty/src/footer.jsx",[],["48","49"],"/home/tamara/RESTy/resty/src/form.jsx",["50"],"import React from 'react';\nimport './form.scss';\nimport IF from \"./if\";\nimport Loader from \"./Loader\";\n\nclass Form extends React.Component{\n    constructor (props){\n        super (props);\n        this.state = {\n            section : 'http://localhost:3000',\n            method : 'GET',\n            body : {},\n            results :[],\n            flag : false,\n\n        }\n        this.submitHandler = this.submitHandler.bind(this);\n        this.toggle = this.toggle.bind (this)\n    }\n    handleInput = e =>{\n        let section = e.target.value;\n        this.setState ({section})\n    };\n\n    handleClick = e =>{\n        e.preventDefault ()\n        let method = e.target.value;\n        this.setState ({method})\n    }\n    submitHandler = async e =>{\n        e.preventDefault();\n        setTimeout(async () => {\n \n   \n        let raw;\n        let method2 ;\n        let url2 ;\n        let body2 ;\n        if (this.props.meth && this.props.ur){\n            method2 = this.props.meth;\n            url2 = this.props.ur;\n            if (this.props.bod){\n                body2 =await JSON.stringify(this.props.bod)\n\n            }else {\n                body2 = e.target.body.value\n            }\n            // console.log ('body after histoty1' , body2)\n                // input.value = url2\n           \n        }else {\n            method2 = this.state.method\n            url2= this.state.section\n            body2 =e.target.body.value\n          \n        }\n        if ((method2 === 'PUT' || method2 === 'POST') ){\n            raw = await fetch(url2 , {method : method2 , body :  body2 ,mode: \"cors\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },});\n        }else if (method2 === 'GET' || method2 === 'DELETE' ) {\n            \n            raw = await fetch(url2 , {method : method2});\n        }\n        \n        this.setState ({body :body2 , flag : !this.state.flag  })\n        let header= await fetch(url2).then((response) => {    \n            for (let pair of response.headers.entries()) {\n                let n = pair.length\n                let string = '';\n                for (let i =0;i<n;i++){\n                    if (i %2 === 0){\n                        string = string + pair[i] + ': ' + pair[i+1]\n                    }\n                }\n                return string;\n            }\n        }); \n    \n        \n        let data = await raw.json()\n        this.setState({ results: data, body: body2, flag: !this.state.flag});\n        let array = [];\n        if (data){\n            let str = `${this.state.method},${this.state.section},${body2}`\n            // console.log('this is the req',str)\n            let oldResult =JSON.parse(localStorage.getItem('request'))\n            if (oldResult){\n                // console.log ('these are old results' , oldResult)\n                Object.values(oldResult).map((item) => { /// keys\n                    if (!array.includes (item)){\n                        array.push (item)\n                    }\n                });\n            }\n            if (!array.includes(str)){\n                // console.log('inside for if ')\n                array.push (str)\n                // array.filter((item, index) => array.indexOf(item) === index)\n                    localStorage.setItem('request', JSON.stringify(array));\n            }\n          \n        }\n        // console.log ('headers', header)\n        // console.log ('data', data)\n        let results;\n        if (data.results){\n            results  = data.results;\n        }else {\n            results = data\n        }\n        let count;\n        if (data.count){    \n            count = data.count;\n        }else {\n            count = data.length\n        }\n       let flag = this.state.flag\n        this.props.handler(results, count ,header, array , flag);\n       \n        }, 3000);\n    }\n\n\n    toggle = ()=>{\n        this.setState ({flag  :! this.state.flag})\n    }\n\n    \n\n    render (){\n        return (\n            <React.Fragment>\n            <form onSubmit={this.submitHandler}>\n                <label for=\"url-input\">URL : </label>\n                <input id=\"inputs\"  type=\"text\" name=\"inputurl\" onChange={this.handleInput} />\n                <div id='formd'>\n            \n                <h4>{this.props.meth || this.state.method}  :  {this.props.ur || this.state.section} </h4>\n                <input id=\"submit\" type=\"submit\" value=\"Go!\"/><br/>\n                </div>\n\n                <IF condition={this.state.flag}>\n                    <Loader></Loader>\n                </IF>\n\n                <button id=\"get\" onClick={this.handleClick} value=\"GET\">GET</button>\n                <button id=\"post\" onClick={this.handleClick} value=\"POST\">POST</button>\n                <button id=\"put\" onClick={this.handleClick} value=\"PUT\">PUT</button>\n                <button id=\"delete\" onClick={this.handleClick} value=\"DELETE\">DELETE</button>\n                <textarea rows=\"4\" cols=\"50\" id=\"textarea\" name=\"body\"  placeholder=\"please enter a json body\"></textarea>\n            </form>\n           \n            </React.Fragment>\n        )\n    };\n    \n}\n\n\n\n\nexport default Form;","/home/tamara/RESTy/resty/src/header.jsx",[],"/home/tamara/RESTy/resty/src/result.jsx",[],"/home/tamara/RESTy/resty/src/history.jsx",["51"],"import React from 'react';\nclass History extends React.Component {\n    constructor (props){\n        super (props)\n        this.hisClickHandler =this.hisClickHandler.bind(this);\n \n    }\n\n    hisClickHandler = e =>{\n        e.preventDefault ()\n        let array2 = []\n        let oldResult =JSON.parse(localStorage.getItem('request'))\n        if (oldResult){\n            Object.values(oldResult).map((item) => {\n                if (!array2.includes (item)){\n                    array2.push (item)\n                }\n            });\n            let meth = e.target.method.value;\n            let ur = e.target.url.value;\n            let bod = e.target.body.value;\n            \n            // this.props.historyHandler(meth, ur ,bod );\n            this.props.after (meth,ur,bod)\n\n    };\n}\n\n\n\n\n\n      \n      render (){\n          return (\n            <React.Fragment>\n        \n              <ul>\n                 {  \n                     this.props.arr.map(item=>{\n                      let str = item.split(',')\n                      let method = str[0];\n                      let url = str[1];\n                      let body;\n                      if (str[2]){\n\n                       body = str[2] \n                      }\n                      if (str.length > 3){\n                          for (let i = 3; i < str.length ; i ++){\n                              body = body + str[i]\n                          }\n                      }\n                      return (\n                          <React.Fragment>\n                          \n                          <form onSubmit={this.hisClickHandler}>\n                          <input type=\"hidden\" value={str[0]} name=\"method\"/>\n                          <input type=\"hidden\" value={str[1]} name=\"url\"/>\n                          <input type=\"hidden\" value={str[2] + str[3]} name=\"body\"/>\n                          <li><button type='submit'>{method}</button>   {url} , body is {body}</li>\n                          </form>\n                         \n                       \n                      \n                          </React.Fragment>\n\n                      )\n                     })\n                     \n                  }\n              </ul>\n            \n        </React.Fragment>\n                   \n         )          \n  \n    }\n}\n\n\n\nexport default History","/home/tamara/RESTy/resty/src/else.jsx",[],["52","53"],"/home/tamara/RESTy/resty/src/if.jsx",[],"/home/tamara/RESTy/resty/src/Loader.js",[],{"ruleId":"54","severity":1,"message":"55","line":46,"column":45,"nodeType":"56","messageId":"57","endLine":46,"endColumn":47},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"54","severity":1,"message":"55","line":91,"column":53,"nodeType":"56","messageId":"57","endLine":91,"endColumn":55},{"ruleId":"54","severity":1,"message":"55","line":14,"column":49,"nodeType":"56","messageId":"57","endLine":14,"endColumn":51},{"ruleId":"58","replacedBy":"62"},{"ruleId":"60","replacedBy":"63"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"no-global-assign","no-unsafe-negation"]