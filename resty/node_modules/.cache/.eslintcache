[{"/home/tamara/RESTy/resty/src/index.js":"1","/home/tamara/RESTy/resty/src/App.jsx":"2","/home/tamara/RESTy/resty/src/footer.jsx":"3","/home/tamara/RESTy/resty/src/form.jsx":"4","/home/tamara/RESTy/resty/src/header.jsx":"5","/home/tamara/RESTy/resty/src/result.jsx":"6","/home/tamara/RESTy/resty/src/history.jsx":"7","/home/tamara/RESTy/resty/src/else.jsx":"8","/home/tamara/RESTy/resty/src/if.jsx":"9"},{"size":221,"mtime":1624384828440,"results":"10","hashOfConfig":"11"},{"size":1452,"mtime":1624478489224,"results":"12","hashOfConfig":"11"},{"size":188,"mtime":1624384828440,"results":"13","hashOfConfig":"11"},{"size":4279,"mtime":1624480027704,"results":"14","hashOfConfig":"11"},{"size":204,"mtime":1624384828440,"results":"15","hashOfConfig":"11"},{"size":660,"mtime":1624534035190,"results":"16","hashOfConfig":"11"},{"size":1815,"mtime":1624486334124,"results":"17","hashOfConfig":"11"},{"size":146,"mtime":1624482873414,"results":"18","hashOfConfig":"11"},{"size":145,"mtime":1624482874134,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1dnyih4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/tamara/RESTy/resty/src/index.js",[],["41","42"],"/home/tamara/RESTy/resty/src/App.jsx",[],"/home/tamara/RESTy/resty/src/footer.jsx",[],"/home/tamara/RESTy/resty/src/form.jsx",["43"],"import React from 'react';\nimport './form.scss';\n// const superagent = require('superagent')\nclass Form extends React.Component{\n    constructor (props){\n        super (props);\n        this.state = {\n            section : 'http://localhost:3000',\n            method : 'GET',\n            body : {},\n            array :[],\n\n        }\n        this.submitHandler = this.submitHandler.bind(this)\n    }\n    handleInput = e =>{\n        let section = e.target.value;\n        this.setState ({section})\n    };\n\n    handleClick = e =>{\n        e.preventDefault ()\n        let method = e.target.value;\n        this.setState ({method})\n    }\n    submitHandler = async e =>{\n        e.preventDefault();\n        let textBody = e.target.body.value\n        // this.setState ({body : e.target.body.value})\n        console.log ('target data',e.target.body.value)\n        // console.log ('body data',this.state.body)\n\n        let req = this.state.section;\n        // let method= this.state.method;\n        let raw;\n        if ((this.state.method === 'PUT' || this.state.method === 'POST') ){\n            raw = await fetch(req , {method : this.state.method , body :  textBody ,mode: \"cors\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },});\n        }else if (this.state.method === 'GET' || this.state.method === 'DELETE' ) {\n            \n            raw = await fetch(req , {method : this.state.method});\n        }\n        \n        // this.setState.body ({textBody})\n        let header= await fetch(req).then((response) => {    \n            for (let pair of response.headers.entries()) {\n                let n = pair.length\n                let string = '';\n                for (let i =0;i<n;i++){\n                    if (i %2 === 0){\n                        string = string + pair[i] + ': ' + pair[i+1]\n                    }\n                }\n                return string;\n            }\n        }); \n    \n        \n        let data = await raw.json()\n        let array = [];\n        if (data){\n            let str = `${this.state.method},${this.state.section},${textBody}`\n            // console.log('this is the req',str)\n            let oldResult =JSON.parse(localStorage.getItem('request'))\n            if (oldResult){\n                // console.log ('these are old results' , oldResult)\n                Object.values(oldResult).map((item) => {\n                    if (!array.includes (item)){\n                        array.push (item)\n                    }\n                });\n            }\n            if (!array.includes(str)){\n                // console.log('inside for if ')\n                array.push (str)\n                // array.filter((item, index) => array.indexOf(item) === index)\n                    localStorage.setItem('request', JSON.stringify(array));\n            }\n          \n        }\n        // console.log ('headers', header)\n        // console.log ('data', data)\n        let results;\n        if (data.results){\n            results  = data.results;\n        }else {\n            results = data\n        }\n        let count;\n        if (data.count){    \n            count = data.count;\n        }else {\n            count = data.length\n        }\n       \n        this.props.handler(results, count ,header, array);\n    }\n\n    render (){\n        return (\n            <React.Fragment>\n            <form onSubmit={this.submitHandler}>\n                <label for=\"url-input\">URL : </label>\n                <input id=\"url-input\"  type=\"text\" name=\"url-input\" onChange={this.handleInput}/>\n                <input id=\"submit\" type=\"submit\" value=\"Go!\"/><br/>\n                <button id=\"get\" onClick={this.handleClick} value=\"GET\">GET</button>\n                <button id=\"post\" onClick={this.handleClick} value=\"POST\">POST</button>\n                <button id=\"put\" onClick={this.handleClick} value=\"PUT\">PUT</button>\n                <button id=\"delete\" onClick={this.handleClick} value=\"DELETE\">DELETE</button>\n                <textarea rows=\"4\" cols=\"50\" id=\"textarea\" name=\"body\" placeholder=\"please enter a json body\"></textarea>\n            </form>\n            <div id='formd'>\n                <h4>{this.state.method}  :  {this.state.section} </h4>\n            </div>\n            </React.Fragment>\n        )\n    };\n    \n}\n\n\n\n\nexport default Form;","/home/tamara/RESTy/resty/src/header.jsx",[],"/home/tamara/RESTy/resty/src/result.jsx",[],"/home/tamara/RESTy/resty/src/history.jsx",["44"],"import React from 'react';\nimport If from './if';\nimport Else from './else';\nclass History extends React.Component {\n    constructor (props){\n        super (props)\n        this.state = {\n            array2 : [],\n            flag : false\n        }\n        this.hisClickHandler =this.hisClickHandler.bind(this);\n        // this.hisClickHandler2 = this.hisClickHandler2.bind (this)\n    }\n\n    hisClickHandler = e =>{\n        \n        let meth = e.target.method.value;\n        let ur = e.target.url.value;\n        let bod = e.target.body.value;\n        this.props.historyHandler(meth, ur ,bod);\n        this.setState({flag : !this.state.flag})\n\n          \n          }\n      \n      render (){\n          return (\n            <React.Fragment>\n        \n              <ul>\n                 {\n                     this.props.arr.map(item=>{\n                      let str = item.split(',')\n                      let method = str[0];\n                      let url = str[1];\n                      let body = str[2] \n                      console.log ('this is true')\n                      return (\n                          <form onSubmit={this.hisClickHandler }>\n                          <input type=\"hidden\" value={str[0]} name=\"method\"/>\n                          <input type=\"hidden\" value={str[1]} name=\"url\"/>\n                          <input type=\"hidden\" value={str[2]} name=\"body\"/>\n                          <li><button type='submit'>{method}</button>   {url} , body is {body}</li>\n                          </form>\n                      )\n                     })\n  \n                  }\n              </ul>\n              \n\n            \n        <Else condition={this.state.flag}>\n         <p>hi</p>\n        </Else>\n        </React.Fragment>\n                   \n         )          \n  \n    }\n}\n\n\n\nexport default History","/home/tamara/RESTy/resty/src/else.jsx",[],"/home/tamara/RESTy/resty/src/if.jsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":69,"column":53,"nodeType":"51","messageId":"52","endLine":69,"endColumn":55},{"ruleId":"53","severity":1,"message":"54","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":10},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'If' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]